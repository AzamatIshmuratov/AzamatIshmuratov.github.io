{"version":3,"sources":["Game.js","App.js","reportWebVitals.js","index.js"],"names":["pluses","dimMatr2","dimMatr","randPlayer","randComp","currPlayer","randMovesComp","statusWin","Square","props","classN","rand","name","isNaN","find","elem","index","className","onClick","value","Board","state","squares","Array","fill","countMove","countDestroy","i","this","slice","isWinner","document","querySelector","style","display","setState","handleClick","beg","begin","renderSquare","status","id","createSquare","React","Component","Timer","date","Date","timerID","setInterval","tick","clearInterval","length","randCurr","Math","floor","random","push","generateRandom","obj","forEach","counter","map","reduce","acc","Game","handleComp","querySelectorAll","generRandomCompShot","click","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","location","reload","getElementById"],"mappings":"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","file":"static/js/main.440cfe10.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nlet dimMatr = 8;                    //Matrix dimension 8x8 (размерность)\r\nlet dimMatr2 = dimMatr * dimMatr; \r\nlet pluses;                         //Глобальная переменная с индексами кораблей\r\nlet randPlayer = [];                //Рандомные позиции кораблей игрока\r\nlet randComp = [];                  //Рандомные позиции кораблей компьютера\r\nlet currPlayer = 'player';          //Current move\r\nlet randMovesComp = [];             //рандомные ходы компьютера\r\nlet statusWin = '';                 //победа или поражение (по завершению игры)\r\n\r\nfunction Square(props) {\r\n    let classN = \"square\";\r\n    let rand = props.name === \"player\" ? randPlayer : randComp;\r\n    if (props.name === 'player'){\r\n      classN = \"square computer\";  //класс \"computer\" применяется к ячейкам компьютера (левое пооле)\r\n      if(!isNaN(rand.find((elem) => elem === props.index)))  //если находим корабли\r\n         classN += \" colorize\";     //добавляем данный класс ячейке с кораблями \r\n    }\r\n\r\n    return ( //при клике по кнопке выполняется функция handlrClick (ниже)\r\n      <button className={classN} onClick={props.onClick}> \r\n        {props.value}\r\n      </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        squares: Array(dimMatr2).fill(null), //всего ячеек\r\n        countMove: dimMatr2,   //Количество ходов \r\n        countDestroy: dimMatr, //Количество кораблей для ничтожения\r\n      };\r\n    }\r\n  \r\n    handleClick(i) {\r\n      \r\n      if (currPlayer === this.props.name) return; //если текущий ход равен глобальному currPlayer(тек. ход), то ничего не делаем\r\n\r\n      const squares = this.state.squares.slice();\r\n\r\n      if (isWinner(this.state.squares, this.props.name)){\r\n        let winner = document.querySelector(\".statusWin\");\r\n        winner.style.display = \"block\";\r\n        statusWin = this.props.name === 'player' ? 'Поражение!' : 'Победа!';\r\n      }\r\n\r\n      if (!this.state.countMove || (squares[i]) || isWinner(this.state.squares, this.props.name)) {  //Если определен победитель, то return\r\n        randMovesComp = [];\r\n        return;\r\n      }\r\n\r\n      if (this.state.countMove) {\r\n         squares[i] = isNaN(pluses.find(elem => elem === i)) ? '-': '+';  //Если при клике угадали положение коробля, то \"+\"\r\n      }\r\n      else squares[i] = null;\r\n\r\n\r\n      this.setState({\r\n        squares: squares,\r\n        countMove: this.state.countMove - 1,\r\n      });\r\n\r\n      if (squares[i] === '+') {\r\n        this.setState({\r\n          countDestroy: this.state.countDestroy - 1,\r\n        });\r\n      }\r\n      else currPlayer = this.props.name;\r\n\r\n    }\r\n  \r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.state.squares[i]}\r\n          onClick={() => this.handleClick(i)}  //при клике по кнопке в Square выполняем handleClick()\r\n          index = {i}\r\n          name = {this.props.name}\r\n        />\r\n      );\r\n    }\r\n\r\n    createSquare(beg){  //Формирование одной строки матрицы\r\n      let begin = beg;  //Начальное значение: например, матрица 8 х 8 - начальные значения соответсвенно: 0, 8, 16 ...\r\n      return (\r\n        <div className = \"board-row\">\r\n           {this.renderSquare(begin++)}  \r\n           {this.renderSquare(begin++)}\r\n           {this.renderSquare(begin++)}\r\n           {this.renderSquare(begin++)}\r\n           {this.renderSquare(begin++)}\r\n           {this.renderSquare(begin++)}\r\n           {this.renderSquare(begin++)}\r\n           {this.renderSquare(begin)}     \r\n        </div>\r\n      );\r\n    }\r\n    \r\n    render() {\r\n      const isWin = isWinner(this.state.squares, this.props.name);  //переменная хранит булевое значение (победа или нет)\r\n      let status;\r\n      if (isWin) {\r\n        status = 'ПОБЕДА!!!';\r\n      } else {\r\n        status = (!this.state.countMove) ? 'Ты проиграл': 'Осталось ходов: ' + this.state.countMove;\r\n      }      \r\n      \r\n      return (\r\n        <div className = \"container_area\">\r\n          <div>\r\n              <div className = \"status1\">{status}</div>\r\n              <div className = \"status2\">Осталось уничтожить: {this.state.countDestroy}</div>\r\n              <div id = 'area'>  \r\n                  {this.createSquare(0)}    {/*создается одна строка поля*/}\r\n                  {this.createSquare(8)}\r\n                  {this.createSquare(16)}\r\n                  {this.createSquare(24)} \r\n                  {this.createSquare(32)}\r\n                  {this.createSquare(40)}\r\n                  {this.createSquare(48)}\r\n                  {this.createSquare(56)}\r\n              </div>\r\n              <div className = \"namePlayer\">{this.props.name}</div>\r\n            </div>\r\n        </div>\r\n      );  \r\n    } \r\n}\r\n\r\nclass Timer extends Component {   //Данный компонент необходим для постоянного рендеринга следующего хода\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: new Date()};    //данное состояние необходимо для постоянного рендеринга\r\n  }\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => {\r\n      return this.tick()}, 100);  //обновление информации о следующем ходе каждые 100 мс\r\n  }\r\n  componentWillUnmount() {        //необходимо сбрасывать таймер\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className = \"statusWin\">{statusWin}</div>\r\n        <div className = \"nextGamer\">Следующий ход: {currPlayer}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Game extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: new Date()};  //Необходимо для постоянного рендеринга компонента\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => {\r\n      this.handleComp();\r\n      return this.tick()}, 1000);   \r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n handleComp(){\r\n  if (currPlayer == 'computer'){\r\n      let elems = document.querySelectorAll('.computer' || '.colorize');  //в elems записываюся ячейки поля игрока (не компьютера) \r\n      let rand = generRandomCompShot();                                       //для применения к ним стилей\r\n      elems[rand].click();            //имитация клика (рандомного) компьютером\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <Timer />\r\n        <div className=\"game-board\">\r\n          <Board name='player'/>\r\n          <Board name='computer'/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} \r\n\r\nfunction generRandomCompShot() {        //рандом-генерация индекса кнопки, для произведения \"выстрела\" компьютером\r\n  let rand;\r\n  rand = Math.floor(Math.random() * Math.floor(dimMatr2 - 1));   \r\n  while (rand === randMovesComp.find(elem => elem === rand)){   //проверка на отсутсвие элемента в глобальном randMovesComp\r\n    rand = Math.floor(Math.random() * Math.floor(dimMatr2 - 1));\r\n  }\r\n  randMovesComp.push(rand);        //необходимо запоминать ранее произведенные \"выстрелы\" \r\n  return rand;\r\n}\r\n\r\nfunction generateRandom(name){   //генерация рандомного числа - расположение кораблей\r\n  let countRand = dimMatr;       //количество одиночных кораблей\r\n  let rand = [];\r\n  let i = 0;\r\n  let randCurr;         //текущее рандомное число\r\n  while (i < countRand){\r\n    randCurr = Math.floor(Math.random() * Math.floor(dimMatr2 - 1));  \r\n    if (randCurr != rand.find(elem => elem === randCurr)){\r\n      rand.push(randCurr);\r\n      i++;\r\n    }\r\n  }\r\n  if (name === 'player'){\r\n     randPlayer = rand;\r\n  } else randComp = rand;\r\n  \r\n}\r\n\r\nfunction isWinner(squares, name) {\r\n\r\n    let rand = name === 'player' ? randPlayer : randComp;\r\n    if (!rand.length) {  //генерируем рандомную расстановку кораблей в начале боя\r\n      generateRandom(name);\r\n    }\r\n\r\n    const obj = new Array(dimMatr2);\r\n    \r\n    rand.forEach(elem => obj[elem] = '+' );   \r\n\r\n    let counter = 0;\r\n   \r\n    pluses = obj.map((elem, index) => elem ? index: null);  //в глобальную переменную записываем индексы кораблей поля, например [2, 7, 12]\r\n\r\n    for (let i = 0; i < obj.length; i++) {      //переменная counter необходима для проверки того, уничтожены ли все корабли\r\n        if (squares[i] && obj[i]){\r\n          counter++;\r\n        }\r\n    }\r\n    if (counter === obj.reduce((acc, elem) => elem ? acc + 1 : acc, 0)){  //если counter равен числу всех кораблей, то это Победа!\r\n      return true;\r\n    }\r\n      \r\n    return null;\r\n  }\r\n\r\n  export default Game","//import logo from './logo.svg';\nimport './Game.css';\nimport Game from './Game.js'\n\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className = \"nameGame\">Морской бой (одиночные корабли)</div>    \n    <App />\n    <button id = \"reload\" onClick = {() => {document.location.reload()}}>Начать заново</button>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}